/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // This plugin creates a self-contained jar file including all dependencies
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    // Use this to check for newer versions of dependency libraries via
    // ./gradlew dependencyUpdates
    id "com.github.ben-manes.versions" version "0.51.0"
    // add jshell support (https://github.com/mrsarm/jshell-plugin):
    // rlwrap ./gradlew --console plain jshell
    id "com.github.mrsarm.jshell.plugin" version "1.2.1"
    // https://docs.freefair.io/gradle-plugins/8.4/reference/#_lombok
    id "io.freefair.lombok" version "8.6"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    // 7bulls, activeeon maven repositories for SAL
    maven {
        url 'http://repository.activeeon.com/content/groups/proactive/'
        allowInsecureProtocol = true
    }
    // NebulOuS-developed components
    maven {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    // JSON parsing, also used by the data classes defined in sal-common:
    // https://github.com/FasterXML/jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    // YAML parsing: https://github.com/FasterXML/jackson-dataformats-text
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.2'

    // Command-line parsing: https://picocli.info
    implementation 'info.picocli:picocli:4.7.6'

    // SAL client library
    implementation 'org.ow2.proactive:sal-common:13.1.0-SNAPSHOT'

    // Logging: SLF4J (implemented by Logback)
    implementation 'ch.qos.logback:logback-classic:1.5.6'
    // Include logstash-logback-encoder for JSON formatting
    implementation 'net.logstash.logback:logstash-logback-encoder:8.0'

    // the EXN Middleware:
    // https://openproject.nebulouscloud.eu/projects/nebulous-collaboration-hub/wiki/asynchronous-messaging-specification
    implementation ('eu.nebulouscloud:exn-connector-java:1.0-SNAPSHOT') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }

    // Analysing KubeVela
    implementation project(':nebulous-requirements-extractor')

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
    testImplementation 'org.wiremock:wiremock:3.9.1'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'eu.nebulouscloud.optimiser.controller.Main'
}

jar {
    archiveBaseName='optimiser-controller'
    manifest {
        attributes 'Implementation-Title': 'optimiser-controller',
            'Bundle-Version': '0.1'
    }
}

shadowJar {
    // Creates a fat jar, including all dependencies
    
}

task distJar(type: Copy, dependsOn: shadowJar) {
    description 'Copies the fat jar into its documented location.'
    group 'build'
    from shadowJar.archiveFile
    into 'dist/'
}
clean {
    delete 'dist/'
}
assemble.dependsOn distJar

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
