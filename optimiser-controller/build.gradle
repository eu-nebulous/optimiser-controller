/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // This plugin creates a self-contained jar file including all dependencies
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    // Use this to check for newer versions of dependency libraries via
    // ./gradlew dependencyUpdates
    id "com.github.ben-manes.versions" version "0.49.0"
    // add jshell support (https://github.com/mrsarm/jshell-plugin):
    // rlwrap ./gradlew --console plain jshell
    id "com.github.mrsarm.jshell.plugin" version "1.2.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    // 7bulls, activeeon maven repositories for SAL
    maven {
        url 'http://repository.activeeon.com/content/groups/proactive/'
        allowInsecureProtocol = true
    }
}

dependencies {
    // YAML parsing: https://github.com/decorators-squad/eo-yaml/tree/master
    implementation 'com.amihaiemil.web:eo-yaml:7.0.9'

    // Command-line parsing: https://picocli.info
    implementation 'info.picocli:picocli:4.7.5'

    // SAL client library
    implementation 'org.ow2.proactive:sal-common:13.1.0-SNAPSHOT'

    // Logging: https://www.slf4j.org
    implementation 'org.slf4j:slf4j-api:2.0.9'
    // We use java.util.logging as the backend for now; see
    // https://www.slf4j.org/manual.html#projectDep for other options
    implementation 'org.slf4j:slf4j-jdk14:2.0.9'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.wiremock:wiremock:3.3.1'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'eu.nebulous.optimiser.controller.Main'
}

jar {
    archiveBaseName='optimiser-controller'
    manifest {
        attributes 'Implementation-Title': 'optimiser-controller',
            'Bundle-Version': '0.1'
    }
}

shadowJar {
    // Creates a fat jar, including all dependencies
    
}

task distJar(type: Copy, dependsOn: shadowJar) {
    description 'Copies the fat jar into its documented location.'
    group 'build'
    from shadowJar.archiveFile
    into 'dist/'
}
clean {
    delete 'dist/'
}
assemble.dependsOn distJar

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
